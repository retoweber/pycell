# PyCell
An alternative to Excel or other spreadsheet programs.
You can edit the `pycell.csv`.

## Syntax
- Write anything in the csv and it will be interpreted as a string.
- Start it with `=` and everything afterwards will be interpreted as python code.

More specifically: Assume the cell at location x=1 and y=2 `=1+2` becomes
```
def fun_2_1(cell: Cell, sh: SpreadSheet):
    return 1+2
```

You can now access these values. Again assuming the above example you can
now use these values by the following code: `=sh[2,1]`

By executing the python program the spreadsheet gets evaluated.
A new spreadsheet in `pycell_out.csv` gets created with the evaluated cells.

The cells can be accessed by two functions:
- `=sh[y,x]` accesses the cell at row `y` and column `x`
- `=cell[dy,dx]` accessed the cell at the relative `dy,dx` position from 
the current cell

The cells are stored internally as a numpy array.
Therefore also sub parts can be chosen:
- `=sh[1:3,2]` accesses the cells at row `1` and `2` and at column `2`.

You can define everything in a cell what can be legally put after a `return` statement in python.

Please check the `pycell.csv` for interesting examples.

- Please don't take this code too seriously.
It has obvious security issues as it just executes whatever code is in the 
spreadsheet.
It could be improved by a simple GUI which just lets you execute each cell 
individually and look at the formula and the  computed value 
simultaneously.
- But also don't take not serious: A spreadsheet program is nothing 
complicated. This can do the job and because you can import every python
library you have installed on your computer it has much more possibilities
than Excel or LibreOffice.